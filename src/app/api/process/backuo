import { NextRequest, NextResponse } from "next/server";
import puppeteer from "puppeteer";
import openAiPeticion from "@/lib/processgpt";
import { geminiPetition } from "@/lib/processgemini";
// Configuración de timeout y límites
const EXTRACTION_TIMEOUT = 120000; // 30 segundos
const MAX_URL_COUNT = 5; // Límite de URLs a procesar
const MAX_TEXT_LENGTH = 100000; // Límite de caracteres por sitio

// Lista negra de dominios mejorada
const DOMAIN_BLACKLIST = new Set([
    "google.com",
    "facebook.com",
    "twitter.com",
    "linkedin.com",
    "youtube.com",
    "instagram.com",
    "wikipedia.org",
    "amazon.com",
    "apple.com",
    "microsoft.com",
    "gov.cl", // Ejemplo de dominio gubernamental
    "edu.pe", // Ejemplo de dominio educativo
]);

export async function POST(request: NextRequest) {
    try {
        // Parsear las URLs del cuerpo de la solicitud
        const { urls, procesador } = await request.json();

        // Validar entrada
        if (!Array.isArray(urls) || urls.length === 0) {
            return NextResponse.json(
                { error: "Se requiere un array de URLs válidas" }, 
                { status: 400 }
            );
        }

        // Limitar número de URLs
        const processUrls = urls.slice(0, MAX_URL_COUNT);

        const browser = await puppeteer.launch({
            headless: true,
            timeout: EXTRACTION_TIMEOUT,
            args: [
                "--no-sandbox", 
                "--disable-setuid-sandbox",
                "--disable-gpu",
                "--disable-dev-shm-usage"
            ]
        });
        // Función de extracción de texto con mejor manejo de errores
        async function safeExtractTextFromSite(url: string) {
            // Validar URL
            if (isBlacklisted(url)) {
                return { 
                    url, 
                    text: "URL no permitida", 
                    error: "Dominio bloqueado" 
                };
            }

            try {
                const page = await browser.newPage();
                
                // Configurar tiempo de espera
                await page.setDefaultTimeout(EXTRACTION_TIMEOUT);

                // Navegar con manejo de errores
                await page.goto(url, { 
                    waitUntil: "networkidle2",
                    timeout: EXTRACTION_TIMEOUT 
                });

                // Scroll optimizado
                await page.evaluate(async () => {
                    await new Promise<void>((resolve) => {
                        let scrollHeight = document.body.scrollHeight;
                        let currentHeight = 0;
                        const scrollStep = 500;

                        const scrollInterval = setInterval(() => {
                            window.scrollBy(0, scrollStep);
                            currentHeight += scrollStep;

                            if (currentHeight >= scrollHeight) {
                                clearInterval(scrollInterval);
                                resolve();
                            }
                        }, 100);
                    });
                });

                // Extraer texto con límite de longitud
                const extractedText = await page.evaluate((maxLength) => {
                    function getVisibleText(element: Element): string {
                        if (
                            element.tagName === "SCRIPT" ||
                            element.tagName === "STYLE" ||
                            element.tagName === "NOSCRIPT"
                        ) {
                            return "";
                        }

                        let visibleText = "";
                        for (const child of element.childNodes) {
                            if (child.nodeType === Node.TEXT_NODE) {
                                visibleText += (child as Text).textContent?.trim() + " ";
                            } else if (child.nodeType === Node.ELEMENT_NODE) {
                                visibleText += getVisibleText(child as Element);
                            }
                        }
                        return visibleText;
                    }

                    const text = getVisibleText(document.body);
                    return text.slice(0, maxLength);
                }, MAX_TEXT_LENGTH);

                await page.close();

                return { 
                    url, 
                    text: cleanWebText(extractedText), 
                    error: null 
                };

            } catch (error) {
                return { 
                    url, 
                    text: "", 
                    error: error instanceof Error ? error.message : "Error desconocido" 
                };
            }
        }

        // Función para verificar dominios bloqueados
        function isBlacklisted(url: string): boolean {
            try {
                const parsedUrl = new URL(url);
                return Array.from(DOMAIN_BLACKLIST).some(domain => 
                    parsedUrl.hostname.includes(domain)
                );
            } catch {
                return true; // URL inválida
            }
        }

        // Función de limpieza de texto
        function cleanWebText(rawText: string): string {
            return rawText
                .replace(/\t+/g, " ")
                .replace(/\n+/g, "\n")
                .replace(/\s+/g, " ")
                .trim();
        }

        // Procesar todas las URLs en paralelo
        const extractionResults = await Promise.all(
            processUrls.map(url => safeExtractTextFromSite(url))
        );
        // Cerrar navegador
        await browser.close();
        console.log("dataItemg: ", extractionResults);

        if(procesador=== 0){
            //gpt
            console.log("dataItem: ", extractionResults);
            const data =  await openAiPeticion(extractionResults)
            return NextResponse.json({
                message: "Extracción completada",
                 results: data,
                 proces: procesador
             });
        }else if(procesador === 1){

            const data =  await geminiPetition(extractionResults)
            return NextResponse.json({
                message: "Extracción completada",
                 results: data,
                 proces:procesador
             });
        }
        

    } catch (error) {
        console.error("Error en extracción web:", error);
        return NextResponse.json(
            { 
                message: "Error en extracción", 
                error: error instanceof Error ? error.message : "Error desconocido" 
            }, 
            { status: 500 }
        );
    }
}




/////////////////////////////////////////////
const systemMessage = `Eres un asistente especializado en auditar sitios web a nivel de contenido. Tu tarea es ayudar a los usuarios a mejorar el contenido de sus sitios web, especialmente en lo que respecta a productos y servicios. A continuación, se te proporcionarán dos enlaces: el primero corresponde al sitio web personal del usuario y el segundo es de un sitio web de competencia. Tu objetivo es evaluar ambos sitios y brindar recomendaciones para optimizar su contenido, estructura, y presentación de productos o servicios, con el fin de captar clientes potenciales o aumentar las ventas.



Al evaluar los sitios, enfócate en los siguientes aspectos:

- Copy: Verifica si el contenido es claro, persuasivo y está bien estructurado. Asegúrate de que se comunique de manera efectiva el valor de los productos o servicios.
- Estructura: Muestra alternativa de cómo se puede mostrar el sitio web en general.
- Estructura: Revisa la organización del contenido. ¿Está bien distribuido? ¿Es fácil de navegar?
- Detalles de productos o servicios: ¿Son claros los beneficios y características de los productos/servicios? ¿Está bien detallada la información?
- Llamados a la acción: Verifica si las llamadas a la acción (CTAs) son visibles, claras y efectivas para motivar a los usuarios a tomar acción.
- Optimización para conversión: ¿El sitio está diseñado para convertir visitantes en clientes? Proporciona recomendaciones para mejorar esta conversión.

Recuerda que las recomendaciones deben ser personalizadas y empáticas, ya que el contenido puede ser sensible para el usuario. Asegúrate de mantener siempre un tono profesional y proporcionar ejemplos prácticos donde sea posible.

Si los sitios son en inglés, responde en inglés; si son en español, responde en español.`;

No necesito  que saludes, 

////////////////////////////////////////////////////



///route 2 
import { NextRequest, NextResponse } from "next/server";
import puppeteer, { Browser, Page } from 'puppeteer-core';
import chromium from '@sparticuz/chromium';
import { geminiPetition } from "@/lib/processgemini";

// Interfaces y tipos
interface ExtractionResult {
    url: string;
    text: string;
    error: string | null;
}

interface RequestBody {
    urls: string[];
    procesador: number;
}

interface ProcessedResult {
    summary?: string;
    analysis?: string;
    keywords?: string[];
    mainPoints?: string[];
    error?: string;
}

interface ApiResponse {
    message: string;
    results?: ProcessedResult | string;
    extract?: ExtractionResult[];
    error?: string;
    processingTime?: number;
}

// Configuración
const CONFIG = {
    TIMEOUTS: {
        EXTRACTION: 300000,      // 30 segundos
        SCROLL: 150000,          // 15 segundos
        PAGE_LOAD: 300000,       // 30 segundos
        API: 600000,             // 60 segundos
        BROWSER_LAUNCH: 30000   // 30 segundos
    },
    LIMITS: {
        MAX_URL_COUNT: 50000,
        MAX_TEXT_LENGTH: 10000000
    },
    DOMAIN_BLACKLIST: new Set([
        "google.com",
        "facebook.com",
        "twitter.com",
        "linkedin.com",
        "youtube.com",
        "instagram.com",
        "wikipedia.org",
        "amazon.com",
        "apple.com",
        "microsoft.com",
        "gov.cl",
        "edu.pe"
    ])
};

// Funciones de utilidad
function isValidUrl(url: string): boolean {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}

function cleanText(text: string): string {
    return text
        .replace(/\s+/g, ' ')
        .trim()
        .slice(0, CONFIG.LIMITS.MAX_TEXT_LENGTH);
}

function isBlacklisted(url: string): boolean {
    try {
        const parsedUrl = new URL(url);
        return Array.from(CONFIG.DOMAIN_BLACKLIST).some(domain =>
            parsedUrl.hostname.endsWith(domain)
        );
    } catch {
        console.error(`URL inválida: ${url}`);
        return true;
    }
}

// Función principal de extracción
async function safeExtractTextFromSite(url: string, browser: Browser): Promise<ExtractionResult> {
    let page: Page | null = null;
    const extractionTimeout = setTimeout(() => {
        if (page) {
            page.close().catch(console.error);
        }
        throw new Error("Tiempo de extracción excedido");
    }, CONFIG.TIMEOUTS.EXTRACTION);

    try {
        if (!isValidUrl(url)) {
            throw new Error(`Formato de URL inválido: ${url}`);
        }

        if (isBlacklisted(url)) {
            return { url, text: "Dominio bloqueado", error: "Dominio en lista negra" };
        }

        page = await browser.newPage();
        
        // Configurar página
        await page.setDefaultNavigationTimeout(CONFIG.TIMEOUTS.PAGE_LOAD);
        await page.setDefaultTimeout(CONFIG.TIMEOUTS.PAGE_LOAD);
        
        // Bloquear recursos innecesarios
        await page.setRequestInterception(true);
        page.on('request', (request) => {
            if (['image', 'stylesheet', 'font', 'media'].includes(request.resourceType())) {
                request.abort();
            } else {
                request.continue();
            }
        });

        // Navegar con timeout
        await Promise.race([
            page.goto(url, { 
                waitUntil: 'networkidle2',
                timeout: CONFIG.TIMEOUTS.PAGE_LOAD 
            }),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout de navegación')), CONFIG.TIMEOUTS.PAGE_LOAD)
            )
        ]);

        // Extraer texto con timeout
        const text = await Promise.race([
            page.evaluate(() => document.body.innerText),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout de extracción de texto')), CONFIG.TIMEOUTS.EXTRACTION)
            )
        ]) as string;

        const cleanedText = cleanText(text);

        if (!cleanedText) {
            return { url, text: "", error: "No se encontró contenido de texto" };
        }

        return { url, text: cleanedText, error: null };

    } catch (error) {
        console.error(`Error procesando ${url}:`, error);
        return {
            url,
            text: "",
            error: error instanceof Error ? error.message : "Error desconocido"
        };
    } finally {
        clearTimeout(extractionTimeout);
        if (page) {
            await page.close().catch(console.error);
        }
    }
}

// Manejador de la ruta POST
export async function POST(request: NextRequest): Promise<NextResponse<ApiResponse>> {
    let browser: Browser | null = null;
    const startTime = Date.now();

    try {
        const body = await request.json() as RequestBody;
        const urls = Array.isArray(body?.urls) ? body.urls : null;

        if (!urls?.length) {
            return NextResponse.json({
                message: "Error de validación",
                error: "Se requiere un array de URLs"
            }, { status: 400 });
        }

        // Iniciar navegador con timeout
        browser = await Promise.race([
            puppeteer.launch({
                args: [...chromium.args, '--no-sandbox', '--disable-setuid-sandbox'],
                defaultViewport: chromium.defaultViewport,
                executablePath: await chromium.executablePath(),
                headless: true,
            }),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout al iniciar navegador')), CONFIG.TIMEOUTS.BROWSER_LAUNCH)
            )
        ]) as Browser;

        const validUrls = urls
            .filter(isValidUrl)
            .slice(0, CONFIG.LIMITS.MAX_URL_COUNT);

        if (!validUrls.length) {
            throw new Error("No se proporcionaron URLs válidas");
        }

        // Procesar URLs en paralelo
        const results = await Promise.all(
            validUrls.map(url => safeExtractTextFromSite(url, browser!))
          );
        // Procesar con Gemini con timeout
        let processedResults: string | ProcessedResult = '';
        try {
            processedResults = await Promise.race([
                geminiPetition(results),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout de API Gemini')), CONFIG.TIMEOUTS.API)
                )
            ]) as string;
        } catch (error) {
            console.error("Error en procesamiento Gemini:", error);
            processedResults = "Falló el procesamiento de contenido";
        }

        return NextResponse.json({
            message: "Procesamiento completado",
            results: processedResults,
            extract: results,
            processingTime: Date.now() - startTime
        });

    } catch (error) {
        console.error("Error en el procesamiento:", error);
        return NextResponse.json({
            message: "Falló el procesamiento",
            error: error instanceof Error ? error.message : "Error desconocido",
            processingTime: Date.now() - startTime
        }, { status: 500 });

    } finally {
        if (browser) {
            try {
                await browser.close();
            } catch (error) {
                console.error("Error al cerrar el navegador:", error);
            }
        }
    }
}






    {/*
     tu respuesta debe ser únicamente la estructura que debe tener mi landing page, adicional genérame un JSON de esta estructura para elementor con la clave *json-elementor* \n

     const promptData = `
    Hola, en este caso vas a simular ser un agente experto en auditar sitios web a nivel de contenido. \n Entonces podrías brindar al usuario, la estructura que debe tener su sitio web extrayendo lo mejor de ambos para que su sitio web genere resultados y citar estrategias que pueda implementar con grandes empresas referentes en un rubro para que esta empresa pueda escalar. \n
     Debes de verificar que ambos sitios web pertenezcan al mismo rubro, si no es así deberás mandar un mensaje de: Los sitios web no pertenecen al mismo rubro. \n
    Este es el contenido extraído de mi sitio web: ${websiteOne.text} \n
    Y este el contenido extraído de mi competencia: ${websiteTwo.text} \n

    Si vez que la estructura no es tan buena y eficiente para vender un productos o vender un servicio necesito que recomiendes que estructura debe seguir y tener su página web para generar resultados.

    Adicional sugiere estrategias que deben seguir y aplicar para escalar su negocio.\n
    
    El idioma en  el que debes de responder es el idioma que tiene mi sitio web
    `;*/}


    ///enfocar a una landing page